rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // Users collection - users can only access their own profile
    match /users/{userId} {
      allow read, write: if isAuthenticated() && isOwner(userId);
      allow create: if isAuthenticated() && isOwner(userId) && 
                       request.resource.data.id == request.auth.uid;
    }
    
    // Transactions collection - users can only access their own transactions
    match /transactions/{transactionId} {
      allow read, delete: if isAuthenticated() && 
                             resource.data.userId == request.auth.uid;
      
      allow create: if isAuthenticated() && 
                       request.resource.data.userId == request.auth.uid &&
                       request.resource.data.amount is number &&
                       request.resource.data.type in ['income', 'expense'] &&
                       request.resource.data.method in ['cash', 'upi', 'card', 'bank'];
      
      allow update: if isAuthenticated() && 
                       resource.data.userId == request.auth.uid &&
                       request.resource.data.userId == request.auth.uid &&
                       request.resource.data.amount is number &&
                       request.resource.data.type in ['income', 'expense'] &&
                       request.resource.data.method in ['cash', 'upi', 'card', 'bank'];
    }
    
    // Debts collection - users can only access their own debts
    match /debts/{debtId} {
      allow read, delete: if isAuthenticated() && 
                             resource.data.userId == request.auth.uid;
      
      allow create: if isAuthenticated() && 
                       request.resource.data.userId == request.auth.uid &&
                       request.resource.data.amount is number &&
                       request.resource.data.type in ['i_owe', 'they_owe_me'] &&
                       request.resource.data.isSettled is bool;
      
      allow update: if isAuthenticated() && 
                       resource.data.userId == request.auth.uid &&
                       request.resource.data.userId == request.auth.uid &&
                       request.resource.data.amount is number &&
                       request.resource.data.type in ['i_owe', 'they_owe_me'] &&
                       request.resource.data.isSettled is bool;
    }
    
    // Groups collection - simplified approach for groups
    match /groups/{groupId} {
      allow read, write: if isAuthenticated() && 
                            request.auth.uid == resource.data.createdBy;
      
      allow create: if isAuthenticated() && 
                       request.resource.data.createdBy == request.auth.uid &&
                       request.resource.data.name is string &&
                       request.resource.data.members is list;
    }
    
    // Deny all other document access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}